import os
import json
import requests
import sys
import subprocess

GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
GITHUB_REPOSITORY = os.environ.get('GITHUB_REPOSITORY')
GITHUB_PR_NUMBER = os.environ.get('PR_NUMBER')
GITHUB_SHA = os.environ.get('GITHUB_SHA')

if not GITHUB_PR_NUMBER:
    print("Error: The PR_NUMBER environment variable is not set.")
    sys.exit(1)

# Read feedback from a file generated by your analysis script (e.g., pr-line-comments.json)
# The file should be a list of dicts: {"path": ..., "line": ..., "body": ..., "side": "RIGHT"}
if not os.path.exists('pr-line-comments.json'):
    print('No pr-line-comments.json found. Skipping line-level comments.')
    sys.exit(0)

with open('pr-line-comments.json', 'r', encoding='utf-8') as f:
    feedback = json.load(f)

api_url = f"https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls/{GITHUB_PR_NUMBER}/comments"
headers = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "Accept": "application/vnd.github+json"
}

def get_diff_positions():
    """Parse the PR diff to map file lines to diff positions."""
    # Ensure the PR branch exists locally
    pr_branch = f'pull/{GITHUB_PR_NUMBER}/head'
    subprocess.run(['git', 'fetch', 'origin', pr_branch], check=True)

    # Use the fetched branch for the diff
    diff_output = subprocess.check_output(['git', 'diff', '--unified=0', f'FETCH_HEAD']).decode('utf-8')
    diff_positions = {}
    current_file = None

    for line in diff_output.splitlines():
        if line.startswith('+++ b/'):
            current_file = line[6:]
            diff_positions[current_file] = {}
        elif line.startswith('@@') and current_file:
            # Extract line numbers from the diff hunk header
            hunk_info = line.split(' ')[2]
            start_line = int(hunk_info.split(',')[0].lstrip('+'))
            for i, diff_line in enumerate(diff_output.splitlines()):
                if diff_line.startswith('+') and not diff_line.startswith('+++'):
                    diff_positions[current_file][start_line + i] = i

    return diff_positions

# Map file lines to diff positions
diff_positions = get_diff_positions()

for comment in feedback:
    file_path = comment["path"]
    line_number = comment["line"]

    if file_path in diff_positions and line_number in diff_positions[file_path]:
        data = {
            "body": comment["body"],
            "commit_id": GITHUB_SHA,
            "path": file_path,
            "position": diff_positions[file_path][line_number]
        }
        response = requests.post(api_url, headers=headers, data=json.dumps(data))
        print(f"Comment on {file_path}:{line_number} - Status: {response.status_code}")
        if response.status_code >= 300:
            print(response.text)
    else:
        print(f"Skipping comment on {file_path}:{line_number} - Not in diff.")
